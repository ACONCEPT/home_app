version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      POSTGRES_USER: loginapp
      POSTGRES_PASSWORD: loginapp123
      POSTGRES_DB: loginapp
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U loginapp"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: golang-backend
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgresql://loginapp:loginapp123@db:5432/loginapp?sslmode=disable"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: flutter-frontend
    ports:
      - "3000:80"
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped
    environment:
      - API_URL=http://backend:8080

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
